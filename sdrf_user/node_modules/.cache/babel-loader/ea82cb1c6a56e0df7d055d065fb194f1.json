{"ast":null,"code":"var _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...'); // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const dataVis = [];\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map(db => {\n            const tmp = {};\n            tmp.createdAt = el.createdAt;\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            dataVis.push(tmp);\n            return tmp;\n          });\n        });\n        console.log('data array: ', dataVis);\n        console.log('mapped data: ', JSON.stringify(mappedData));\n        const hzRange = [baseHz, topHz];\n        const margin = {\n          top: 30,\n          right: 30,\n          bottom: 30,\n          left: 30\n        };\n        const width = 4450 - margin.left - margin.right;\n        const height = 450 - margin.top - margin.bottom;\n        const svg = d3.select('.chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n        const xScale = d3.scaleBand().range([0, width]).domain(mappedData[0].map(d => {\n          return d.hz;\n        })).padding(0.01);\n        svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(xScale));\n        const yScale = d3.scaleBand().range([height, 0]).domain(mappedData.map(el => el.map(item => item.createdAt).filter((v, i, a) => a.indexOf(v) === i)[0])).padding(0.01);\n        svg.append(\"g\").call(d3.axisLeft(yScale));\n        const colorScale = d3.scaleLinear().range(['white', 'red']).domain([-127, 127]);\n        svg.selectAll().data(dataVis).enter().append(\"rect\").attr(\"x\", function (d) {\n          return xScale(d.hz);\n        }).attr(\"y\", function (d) {\n          return yScale(d.createdAt);\n        }).attr(\"width\", xScale.bandwidth()).attr(\"height\", yScale.bandwidth()).style(\"fill\", function (d) {\n          return colorScale(d.db);\n        });\n        /*\n        const legendData = [\n          {'interval': -127, 'color': 'purple'},\n          {'interval': -65, 'color': 'darkorchid'},\n        {'interval': 0, 'color': 'mediumpurple'},\n        {'interval': 65, 'color': 'lightskyblue'},\n        {'interval': 127, 'color': 'khaki'}\n        ];\n           const width = 917,\n        height= 408,\n        margins = {top:20, right: 50, bottom: 100, left: 100};\n           const yScale = d3.scaleLinear()\n        .range([height,0])\n        .domain([0 ,mappedData.length]);\n           const xScale = d3.scaleLinear()\n        .range([0,width])\n        .domain([baseHz, topHz]);/* mappedData, d => {\n        return d.map((el) => {\n        return el.hz;\n        });\n        }]);\n           //Setting chart width and adjusting for margins\n        const chart = d3.select('.chart')\n        .attr('width', width + margins.right + margins.left)\n        .attr('height', height + margins.top + margins.bottom)\n        .append('g')\n        .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n           const barWidth = width / (hzRange[1] - hzRange[0]),\n        barHeight = height / 12;\n           //Return dynamic color based on intervals in legendData\n        const colorScale = d => {\n        for (let i = 0; i < legendData.length; i++) {\n        if (d.db + baseTemperature < legendData[i].interval) {\n        return legendData[i].color;\n        }\n        }\n        return 'darkred';\n        };\n           let n = 0;\n        //Append heatmap bars, styles, and mouse events\n        chart.selectAll('g')\n        .data(mappedData).enter().append('g')\n        .append('rect')\n        .attr('x', d => {\n        return parseInt((d[1].hz - hzRange[0]) * barWidth, 10);\n        })\n        .attr('y', d => {\n        const yPos = (data.length - n) * barHeight\n        n++;\n        console.log(yPos);\n        return yPos;\n        })\n        .style('fill', '#234aaa')\n        .attr('width', barWidth)\n        .attr('height', barHeight)\n           //Append x axis\n        chart.append('g')\n        .attr('transform','translate(0,' + height + ')')\n        .call(d3.axisBottom(xScale));\n           //Append y axis\n        chart.append('g')\n        .attr('transform','translate(0,-' + barHeight / 2 + ')')\n        .call(d3.axisLeft(yScale))\n        .attr('class','yAxis');\n           //Append y axis label\n        chart.append('text')\n        .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n        .style('text-anchor','middle')\n        .text('row');\n           //Append x axis label\n        chart.append('text')\n        .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n        .style('text-anchor','middle')\n        .text('HZ');\n           //Append color legend using legendData\n        chart.append('g')\n        .selectAll('g')\n        .data(legendData).enter()\n        .append('rect')\n        .attr('width', 30)\n        .attr('height', 20)\n        .attr('x', (d, i) => { return i * 30 + width * .7;})\n        .attr('y', height + margins.top)\n        .style('fill', d => {return d.color; });\n           //Append text labels for legend from legendData\n        chart.append('g')\n        .selectAll('text')\n        .data(legendData).enter().append('text')\n        .attr('x', (d,i) => {return i * 30 + width * .7})\n        .attr('y', height + margins.top * 3)\n        .text(d => {return d.interval; });\n        */\n      } else {\n        console.log('empty response');\n      }\n    });\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, \"Heatmap\"), React.createElement(\"svg\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }, React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","d3","axios","Heatmap","url","get","then","res","console","log","data","baseHz","hzLow","topHz","hzHigh","baseTemperature","step","freqs","length","hz","dataVis","mappedData","map","el","i","db","tmp","createdAt","Math","round","push","JSON","stringify","hzRange","margin","top","right","bottom","left","width","height","svg","select","attr","append","xScale","scaleBand","range","domain","d","padding","call","axisBottom","yScale","item","filter","v","a","indexOf","axisLeft","colorScale","scaleLinear","selectAll","enter","bandwidth","style","App"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const dataVis = [];\n\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map((db) => {\n            const tmp = {};\n            tmp.createdAt = el.createdAt;\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            dataVis.push(tmp);\n            return tmp;\n          });\n        });\n\n        console.log('data array: ', dataVis);\n        console.log('mapped data: ', JSON.stringify(mappedData));\n\n        const hzRange = [baseHz, topHz]; \n        const margin = {top: 30, right: 30, bottom: 30, left: 30};\n        const width = 4450 - margin.left - margin.right;\n        const height = 450 - margin.top - margin.bottom;\n\n        const svg = d3.select('.chart')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        const xScale = d3.scaleBand()\n          .range([0, width])\n          .domain(mappedData[0].map(d => {\n            return d.hz;\n          }))\n          .padding(0.01);\n\n        \n        svg.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale));\n\n\n        const yScale = d3.scaleBand()\n          .range([ height, 0 ])\n          .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n            .filter((v, i, a) => a.indexOf(v) === i)[0]))\n          .padding(0.01);\n        svg.append(\"g\")\n          .call(d3.axisLeft(yScale));\n\n        const colorScale = d3.scaleLinear()\n          .range(['white', 'red'])\n          .domain([-127, 127]);\n\n        svg.selectAll()\n            .data(dataVis)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", function(d) { \n              return xScale(d.hz) \n            })\n            .attr(\"y\", function(d) { \n              return yScale(d.createdAt) \n            })\n            .attr(\"width\", xScale.bandwidth() )\n            .attr(\"height\", yScale.bandwidth() )\n            .style(\"fill\", function(d) { return colorScale(d.db)} )\n\n              /*\n              const legendData = [\n                {'interval': -127, 'color': 'purple'},\n                {'interval': -65, 'color': 'darkorchid'},\n          {'interval': 0, 'color': 'mediumpurple'},\n          {'interval': 65, 'color': 'lightskyblue'},\n          {'interval': 127, 'color': 'khaki'}\n        ];\n        \n        const width = 917,\n              height= 408,\n              margins = {top:20, right: 50, bottom: 100, left: 100};\n        \n        const yScale = d3.scaleLinear()\n          .range([height,0])\n          .domain([0 ,mappedData.length]);\n        \n        const xScale = d3.scaleLinear()\n          .range([0,width])\n          .domain([baseHz, topHz]);/* mappedData, d => {\n            return d.map((el) => {\n              return el.hz;\n            });\n          }]);\n        \n        //Setting chart width and adjusting for margins\n        const chart = d3.select('.chart')\n          .attr('width', width + margins.right + margins.left)\n          .attr('height', height + margins.top + margins.bottom)\n          .append('g')\n          .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n        \n        const barWidth = width / (hzRange[1] - hzRange[0]),\n              barHeight = height / 12;\n        \n        //Return dynamic color based on intervals in legendData\n        const colorScale = d => {\n          for (let i = 0; i < legendData.length; i++) {\n            if (d.db + baseTemperature < legendData[i].interval) {\n              return legendData[i].color;\n            }\n          }\n          return 'darkred';\n        };\n        \n        let n = 0;\n\n        //Append heatmap bars, styles, and mouse events\n        chart.selectAll('g')\n          .data(mappedData).enter().append('g')\n          .append('rect')\n          .attr('x', d => {\n            return parseInt((d[1].hz - hzRange[0]) * barWidth, 10);\n          })\n          .attr('y', d => {\n            const yPos = (data.length - n) * barHeight\n            n++;\n            console.log(yPos);\n            return yPos;\n          })\n          .style('fill', '#234aaa')\n          .attr('width', barWidth)\n          .attr('height', barHeight)\n        \n        //Append x axis\n        chart.append('g')\n          .attr('transform','translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale));\n        \n        //Append y axis\n        chart.append('g')\n          .attr('transform','translate(0,-' + barHeight / 2 + ')')\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n        \n        //Append y axis label\n        chart.append('text')\n          .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n          .style('text-anchor','middle')\n          .text('row');\n        \n        //Append x axis label\n        chart.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n        \n        //Append color legend using legendData\n        chart.append('g')\n          .selectAll('g')\n          .data(legendData).enter()\n          .append('rect')\n          .attr('width', 30)\n          .attr('height', 20)\n          .attr('x', (d, i) => { return i * 30 + width * .7;})\n          .attr('y', height + margins.top)\n          .style('fill', d => {return d.color; });\n        \n        //Append text labels for legend from legendData\n        chart.append('g')\n          .selectAll('text')\n          .data(legendData).enter().append('text')\n          .attr('x', (d,i) => {return i * 30 + width * .7})\n          .attr('y', height + margins.top * 3)\n          .text(d => {return d.interval; });\n        */\n        \n      } else {\n        console.log('empty response');\n      }\n    });\n\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>Heatmap</h1>\n      <svg className='chart'></svg>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Heatmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}