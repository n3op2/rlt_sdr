{"ast":null,"code":"var _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...'); // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const timeRange = d3.extent(data, d => d.createdAt);\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map(db => {\n            const tmp = {};\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            return tmp;\n          });\n        });\n        console.log('mapped data: ', mappedData);\n        const hzRange = [baseHz, topHz];\n        console.log('range: ', hzRange);\n        const svg = d3.select('.chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n        const xScale = d.scaleBand().range([0, width]).domain(mappedData[0], d => d.map(el => el.hz)).padding(0.01);\n        svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d.axisBottom(xScale));\n        /*\n        const legendData = [\n          {'interval': -127, 'color': 'purple'},\n          {'interval': -65, 'color': 'darkorchid'},\n          {'interval': 0, 'color': 'mediumpurple'},\n          {'interval': 65, 'color': 'lightskyblue'},\n          {'interval': 127, 'color': 'khaki'}\n        ];\n        \n        const width = 917,\n              height= 408,\n              margins = {top:20, right: 50, bottom: 100, left: 100};\n        \n        const yScale = d3.scaleLinear()\n          .range([height,0])\n          .domain([0 ,mappedData.length]);\n        \n        const xScale = d3.scaleLinear()\n          .range([0,width])\n          .domain([baseHz, topHz]);/* mappedData, d => {\n            return d.map((el) => {\n              return el.hz;\n            });\n          }]);\n        \n        //Setting chart width and adjusting for margins\n        const chart = d3.select('.chart')\n          .attr('width', width + margins.right + margins.left)\n          .attr('height', height + margins.top + margins.bottom)\n          .append('g')\n          .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n        \n        const barWidth = width / (hzRange[1] - hzRange[0]),\n              barHeight = height / 12;\n        \n        //Return dynamic color based on intervals in legendData\n        const colorScale = d => {\n          for (let i = 0; i < legendData.length; i++) {\n            if (d.db + baseTemperature < legendData[i].interval) {\n              return legendData[i].color;\n            }\n          }\n          return 'darkred';\n        };\n        \n        let n = 0;\n         //Append heatmap bars, styles, and mouse events\n        chart.selectAll('g')\n          .data(mappedData).enter().append('g')\n          .append('rect')\n          .attr('x', d => {\n            return parseInt((d[1].hz - hzRange[0]) * barWidth, 10);\n          })\n          .attr('y', d => {\n            const yPos = (data.length - n) * barHeight\n            n++;\n            console.log(yPos);\n            return yPos;\n          })\n          .style('fill', '#234aaa')\n          .attr('width', barWidth)\n          .attr('height', barHeight)\n        \n        //Append x axis\n        chart.append('g')\n          .attr('transform','translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale));\n        \n        //Append y axis\n        chart.append('g')\n          .attr('transform','translate(0,-' + barHeight / 2 + ')')\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n        \n        //Append y axis label\n        chart.append('text')\n          .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n          .style('text-anchor','middle')\n          .text('row');\n        \n        //Append x axis label\n        chart.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n        \n        //Append color legend using legendData\n        chart.append('g')\n          .selectAll('g')\n          .data(legendData).enter()\n          .append('rect')\n          .attr('width', 30)\n          .attr('height', 20)\n          .attr('x', (d, i) => { return i * 30 + width * .7;})\n          .attr('y', height + margins.top)\n          .style('fill', d => {return d.color; });\n        \n        //Append text labels for legend from legendData\n        chart.append('g')\n          .selectAll('text')\n          .data(legendData).enter().append('text')\n          .attr('x', (d,i) => {return i * 30 + width * .7})\n          .attr('y', height + margins.top * 3)\n          .text(d => {return d.interval; });\n        */\n      } else {\n        console.log('empty response');\n      }\n    });\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, \"Heatmap\"), React.createElement(\"svg\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","d3","axios","Heatmap","url","get","then","res","console","log","data","baseHz","hzLow","topHz","hzHigh","baseTemperature","timeRange","extent","d","createdAt","step","freqs","length","hz","mappedData","map","el","i","db","tmp","Math","round","hzRange","svg","select","attr","width","margin","left","right","height","top","bottom","append","xScale","scaleBand","range","domain","padding","call","axisBottom","App"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const timeRange = d3.extent(data, d => d.createdAt);\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n\n        const mappedData = data.map((el, i) => {\n            console.log('started');\n            hz = baseHz;\n            return el.freqs.map((db) => {\n              const tmp = {};\n              tmp.db = db;\n              tmp.hz = hz;\n              hz = Math.round(hz + step);\n              return tmp;\n            });\n        });\n        console.log('mapped data: ', mappedData);\n\n        const hzRange = [baseHz, topHz]; \n\n        console.log('range: ', hzRange);\n\n        const svg = d3.select('.chart')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        const xScale = d.scaleBand()\n          .range([0, width])\n          .domain(mappedData[0], d => d.map((el) => el.hz))\n          .padding(0.01);\n\n        svg.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(d.axisBottom(xScale));\n\n        /*\n        const legendData = [\n          {'interval': -127, 'color': 'purple'},\n          {'interval': -65, 'color': 'darkorchid'},\n          {'interval': 0, 'color': 'mediumpurple'},\n          {'interval': 65, 'color': 'lightskyblue'},\n          {'interval': 127, 'color': 'khaki'}\n        ];\n        \n        const width = 917,\n              height= 408,\n              margins = {top:20, right: 50, bottom: 100, left: 100};\n        \n        const yScale = d3.scaleLinear()\n          .range([height,0])\n          .domain([0 ,mappedData.length]);\n        \n        const xScale = d3.scaleLinear()\n          .range([0,width])\n          .domain([baseHz, topHz]);/* mappedData, d => {\n            return d.map((el) => {\n              return el.hz;\n            });\n          }]);\n        \n        //Setting chart width and adjusting for margins\n        const chart = d3.select('.chart')\n          .attr('width', width + margins.right + margins.left)\n          .attr('height', height + margins.top + margins.bottom)\n          .append('g')\n          .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n        \n        const barWidth = width / (hzRange[1] - hzRange[0]),\n              barHeight = height / 12;\n        \n        //Return dynamic color based on intervals in legendData\n        const colorScale = d => {\n          for (let i = 0; i < legendData.length; i++) {\n            if (d.db + baseTemperature < legendData[i].interval) {\n              return legendData[i].color;\n            }\n          }\n          return 'darkred';\n        };\n        \n        let n = 0;\n\n        //Append heatmap bars, styles, and mouse events\n        chart.selectAll('g')\n          .data(mappedData).enter().append('g')\n          .append('rect')\n          .attr('x', d => {\n            return parseInt((d[1].hz - hzRange[0]) * barWidth, 10);\n          })\n          .attr('y', d => {\n            const yPos = (data.length - n) * barHeight\n            n++;\n            console.log(yPos);\n            return yPos;\n          })\n          .style('fill', '#234aaa')\n          .attr('width', barWidth)\n          .attr('height', barHeight)\n        \n        //Append x axis\n        chart.append('g')\n          .attr('transform','translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale));\n        \n        //Append y axis\n        chart.append('g')\n          .attr('transform','translate(0,-' + barHeight / 2 + ')')\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n        \n        //Append y axis label\n        chart.append('text')\n          .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n          .style('text-anchor','middle')\n          .text('row');\n        \n        //Append x axis label\n        chart.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n        \n        //Append color legend using legendData\n        chart.append('g')\n          .selectAll('g')\n          .data(legendData).enter()\n          .append('rect')\n          .attr('width', 30)\n          .attr('height', 20)\n          .attr('x', (d, i) => { return i * 30 + width * .7;})\n          .attr('y', height + margins.top)\n          .style('fill', d => {return d.color; });\n        \n        //Append text labels for legend from legendData\n        chart.append('g')\n          .selectAll('text')\n          .data(legendData).enter().append('text')\n          .attr('x', (d,i) => {return i * 30 + width * .7})\n          .attr('y', height + margins.top * 3)\n          .text(d => {return d.interval; });\n        */\n        \n      } else {\n        console.log('empty response');\n      }\n    });\n\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>Heatmap</h1>\n      <svg className='chart'></svg>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Heatmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}