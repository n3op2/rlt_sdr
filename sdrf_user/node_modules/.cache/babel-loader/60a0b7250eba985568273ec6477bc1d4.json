{"ast":null,"code":"import _slicedToArray from \"/home/n3op2/node/sdrf_client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  const _useState = useState(new Date().getTime()),\n        _useState2 = _slicedToArray(_useState, 2),\n        timeDataTaken = _useState2[0],\n        setTimeDataTaken = _useState2[1];\n\n  const _useState3 = useState({}),\n        _useState4 = _slicedToArray(_useState3, 2),\n        lastSample = _useState4[0],\n        setLastSample = _useState4[1];\n\n  const delay = async ms => {\n    await new Promise(resolve => setTimeout(resolve, ms));\n    console.log('after ', ms);\n    setTimeDataTaken(new Date().getTime());\n  };\n\n  useEffect(() => {\n    console.log('useEffect()');\n    const url = 'http://localhost:3010';\n\n    const getData = async () => {\n      /*\n      axios.get(url).then(res => {\n        console.log('fetching data...');\n        // TODO have a separate table for data values such as\n        // hzLow, hzHigh and link it with freqs id\n        if (res.data) {\n          // TODO tidy up\n          const data = res.data;\n          const baseHz = res.data[0].hzLow;\n          const topHz = res.data[0].hzHigh;\n          const baseTemperature = res.data[0].hzLow;\n          const step = (topHz - baseHz) / res.data[0].freqs.length;\n          let hz = baseHz;\n          const dataVis = [];\n           const mappedData = data.map((el, i) => {\n            console.log('started');\n            hz = baseHz;\n            return el.freqs.map((db) => {\n              const tmp = {};\n              tmp.createdAt = el.createdAt;\n              tmp.db = db;\n              tmp.hz = hz;\n              hz = Math.round(hz + step);\n              dataVis.push(tmp);\n              return tmp;\n            });\n          });\n           console.log('top: ', topHz, '\\nbase: ', baseHz);\n           // TODO move it to a separate function\n          const hzRange = [baseHz, topHz]; \n          const margin = {top: 100, right: 50, bottom: 100, left: 50};\n          const width = 9450 - margin.left - margin.right;\n          const height = 950 - margin.top - margin.bottom;\n           const svg = d3.select('.chart')\n            .attr('width', width + margin.left + margin.right)\n            .attr('height', height + margin.top + margin.bottom)\n            .append('g')\n            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n           const xScale = d3.scaleBand()\n            .range([0, width])\n            .domain(mappedData[0].map(d => {\n              return d.hz;\n            }))\n            .padding(0.01);\n           svg.append('g')\n            .attr('transform', 'translate(0,' + height + ')')\n            .call(d3.axisBottom(xScale)\n              .ticks(30, 's'))\n            .attr('class','xAxis');\n            const yScale = d3.scaleBand()\n            .range([ height, 0 ])\n            .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n              .filter((v, i, a) => a.indexOf(v) === i)[0]))\n            .padding(0.01);\n           svg.append(\"g\")\n            .call(d3.axisLeft(yScale))\n            .attr('class','yAxis');\n           svg.append('text')\n            .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n            .style('text-anchor','middle')\n            .text('HZ');\n           const colorScale = d3.scaleLinear()\n            .range(['blue', 'yellow', 'red'])\n            .domain([-127, 0, 127]);\n          \n          svg.selectAll('g.x text')\n            .attr('transform', 'translate(-10,10) rotate(315)');\n           svg.selectAll()\n              .data(dataVis)\n              .enter()\n              .append(\"rect\")\n              .attr(\"x\", function(d) { \n                return xScale(d.hz) \n              })\n              .attr(\"y\", function(d) { \n                return yScale(d.createdAt) \n              })\n              .attr(\"width\", xScale.bandwidth() )\n              .attr(\"height\", yScale.bandwidth() )\n              .style(\"fill\", function(d) { return colorScale(d.db)} )\n        \n          svg.selectAll('g.x')\n            .attr('transform', 'translate(-10,10) rotate(315)');\n        }\n      });\n      */\n    };\n\n    getData();\n  }, ['timeDataTaken']);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Heatmap\"), React.createElement(\"svg\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    style: {\n      height: '100%'\n    },\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","useState","d3","axios","Heatmap","Date","getTime","timeDataTaken","setTimeDataTaken","lastSample","setLastSample","delay","ms","Promise","resolve","setTimeout","console","log","url","getData","App","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AAAA,oBACsBH,QAAQ,CAAC,IAAII,IAAJ,GAAWC,OAAX,EAAD,CAD9B;AAAA;AAAA,QACbC,aADa;AAAA,QACEC,gBADF;;AAAA,qBAEgBP,QAAQ,CAAC,EAAD,CAFxB;AAAA;AAAA,QAEbQ,UAFa;AAAA,QAEDC,aAFC;;AAIpB,QAAMC,KAAK,GAAG,MAAOC,EAAP,IAAc;AAC1B,UAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAnC,CAAN;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBL,EAAtB;AACAJ,IAAAA,gBAAgB,CAAC,IAAIH,IAAJ,GAAWC,OAAX,EAAD,CAAhB;AACD,GAJD;;AAMAN,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAMC,GAAG,GAAG,uBAAZ;;AACA,UAAMC,OAAO,GAAG,YAAY;AAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkGC,KAnGD;;AAoGAA,IAAAA,OAAO;AACR,GAxGQ,EAwGN,CAAC,eAAD,CAxGM,CAAT;AA0GA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD,CA1HD;;AA4HA,MAAMC,GAAG,GAAG,MAAM;AAChB,SACE;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAZ;AAA8B,IAAA,SAAS,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQA,eAAeD,GAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  const [timeDataTaken, setTimeDataTaken] = useState(new Date().getTime());\n  const [lastSample, setLastSample] = useState({});\n   \n  const delay = async (ms) => {\n    await new Promise((resolve) => setTimeout(resolve, ms));\n    console.log('after ', ms);\n    setTimeDataTaken(new Date().getTime());\n  };\n\n  useEffect(() => {\n    console.log('useEffect()');\n    const url = 'http://localhost:3010';\n    const getData = async () => {\n    /*\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const dataVis = [];\n\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map((db) => {\n            const tmp = {};\n            tmp.createdAt = el.createdAt;\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            dataVis.push(tmp);\n            return tmp;\n          });\n        });\n\n        console.log('top: ', topHz, '\\nbase: ', baseHz);\n\n        // TODO move it to a separate function\n        const hzRange = [baseHz, topHz]; \n        const margin = {top: 100, right: 50, bottom: 100, left: 50};\n        const width = 9450 - margin.left - margin.right;\n        const height = 950 - margin.top - margin.bottom;\n\n        const svg = d3.select('.chart')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        const xScale = d3.scaleBand()\n          .range([0, width])\n          .domain(mappedData[0].map(d => {\n            return d.hz;\n          }))\n          .padding(0.01);\n\n        svg.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale)\n            .ticks(30, 's'))\n          .attr('class','xAxis');\n\n\n        const yScale = d3.scaleBand()\n          .range([ height, 0 ])\n          .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n            .filter((v, i, a) => a.indexOf(v) === i)[0]))\n          .padding(0.01);\n\n        svg.append(\"g\")\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n\n        svg.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n\n        const colorScale = d3.scaleLinear()\n          .range(['blue', 'yellow', 'red'])\n          .domain([-127, 0, 127]);\n        \n        svg.selectAll('g.x text')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n\n        svg.selectAll()\n            .data(dataVis)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", function(d) { \n              return xScale(d.hz) \n            })\n            .attr(\"y\", function(d) { \n              return yScale(d.createdAt) \n            })\n            .attr(\"width\", xScale.bandwidth() )\n            .attr(\"height\", yScale.bandwidth() )\n            .style(\"fill\", function(d) { return colorScale(d.db)} )\n      \n        svg.selectAll('g.x')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n      }\n    });\n    */\n    };\n    getData();\n  }, ['timeDataTaken']);\n\n  return (\n    <Fragment>\n      <h1>Heatmap</h1>\n      <svg className='chart'></svg>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div style={{height: '100%'}} className=\"App\">\n      <Heatmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}