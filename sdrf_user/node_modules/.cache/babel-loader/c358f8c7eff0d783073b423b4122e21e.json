{"ast":null,"code":"var _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...'); // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n\n      if (res.data) {\n        console.log(res.data[1]);\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const timeRange = d3.extent(data, d => d.createdAt);\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        const arr = [];\n        let hz = baseHz;\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map(db => {\n            const tmp = {};\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            return tmp;\n          });\n        });\n        console.log('mapped data: ', mappedData);\n        console.log('tmp arr: ', arr);\n      } else {\n        console.log('empty response');\n      }\n    });\n    /*\n    const legendData = [\n      {'interval': -127, 'color': 'purple'},\n      {'interval': -65, 'color': 'darkorchid'},\n      {'interval': 0, 'color': 'mediumpurple'},\n      {'interval': 65, 'color': 'lightskyblue'},\n      {'interval': 127, 'color': 'khaki'}\n    ];\n    \n    const width = 917,\n          height = 408,\n          margins = {top:20, right: 50, bottom: 100, left: 100};\n    \n    const yScale = d3.scaleLinear()\n      .range([height,0])\n      .domain([12,0]);\n    \n    const xScale = d3.scaleLinear()\n      .range([0,width])\n      .domain(d3.extent(data, d => {return d.createdAt; }));\n    \n    //Setting chart width and adjusting for margins\n    const chart = d3.select('.chart')\n      .attr('width', width + margins.right + margins.left)\n      .attr('height', height + margins.top + margins.bottom)\n      .append('g')\n      .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n    \n    const tooltip = d3.select('.container').append('div')\n      .attr('class','tooltip')\n      .html('Tooltip')\n    \n    const barWidth = width / (yearRange[1] - yearRange[0]),\n          barHeight = height / 12;\n    \n    //Return dynamic color based on intervals in legendData\n    const colorScale = d => {\n      for (let i = 0; i < legendData.length; i++) {\n        if (d.db + baseTemperature < legendData[i].interval) {\n          return legendData[i].color;\n        }\n      }\n      return 'darkred';\n    };\n    \n    //Return abbreviate month string from month decimal\n    const timeParseFormat = d => {\n      if (d === 0) return '';\n      return d3.timeFormat('%b')(d3.timeParse('%m')(d));\n    };\n    \n    //Append heatmap bars, styles, and mouse events\n    chart.selectAll('g')\n      .data(data).enter().append('g')\n      .append('rect')\n      .attr('x', d => {return (d.freq - timeRange[0]) * barWidth})\n      .attr('y', d => {return (d.createdAt - 1) * barHeight})\n      .style('fill', colorScale)\n      .attr('width', barWidth)\n      .attr('height', barHeight)\n      .on('mouseover', d => {\n        tooltip.html(timeParseFormat(d.month) + ' ' + d.year + '<br/>' +\n          d3.format('.4r')(baseTemperature + d.variance) + ' &degC<br/>' + d.variance + ' &degC' )\n          .style('left', d3.event.pageX - 35 + 'px')\n          .style('top', d3.event.pageY - 73 + 'px')\n          .style('opacity', .9);\n      }).on('mouseout', () => {\n        tooltip.style('opacity', 0)\n          .style('left', '0px');\n      });\n    \n    //Append x axis\n    chart.append('g')\n      .attr('transform','translate(0,' + height + ')')\n      .call(d3.axisBottom(xScale).tickFormat(d3.format('.4')));\n    \n    //Append y axis\n    chart.append('g')\n      .attr('transform','translate(0,-' + barHeight / 2 + ')')\n      .call(d3.axisLeft(yScale).tickFormat(timeParseFormat))\n      .attr('class','yAxis');\n    \n    //Append y axis label\n    chart.append('text')\n      .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n      .style('text-anchor','middle')\n      .text('Month');\n    \n    //Append x axis label\n    chart.append('text')\n      .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n      .style('text-anchor','middle')\n      .text('Year');\n    \n    //Append color legend using legendData\n    chart.append('g')\n      .selectAll('g')\n      .data(legendData).enter()\n      .append('rect')\n      .attr('width', 30)\n      .attr('height', 20)\n      .attr('x', (d, i) => { return i * 30 + width * .7;})\n      .attr('y', height + margins.top)\n      .style('fill', d => {return d.color; });\n    \n    //Append text labels for legend from legendData\n    chart.append('g')\n      .selectAll('text')\n      .data(legendData).enter().append('text')\n      .attr('x', (d,i) => {return i * 30 + width * .7})\n      .attr('y', height + margins.top * 3)\n      .text(d => {return d.interval; });\n      \n    });\n    */\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, \"Heatmap\"));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","d3","axios","Heatmap","url","get","then","res","console","log","data","baseHz","hzLow","topHz","hzHigh","baseTemperature","timeRange","extent","d","createdAt","step","freqs","length","arr","hz","mappedData","map","el","i","db","tmp","Math","round","App"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpBH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMI,GAAG,GAAG,uBAAZ;AACAF,IAAAA,KAAK,CAACG,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoBC,GAAG,IAAI;AACzBC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADyB,CAEzB;AACA;;AACA,UAAIF,GAAG,CAACG,IAAR,EAAc;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAJ,CAAS,CAAT,CAAZ;AACA,cAAMA,IAAI,GAAGH,GAAG,CAACG,IAAjB;AACA,cAAMC,MAAM,GAAGJ,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYE,KAA3B;AACA,cAAMC,KAAK,GAAGN,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYI,MAA1B;AACA,cAAMC,eAAe,GAAGR,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYE,KAApC;AACA,cAAMI,SAAS,GAAGf,EAAE,CAACgB,MAAH,CAAUP,IAAV,EAAgBQ,CAAC,IAAIA,CAAC,CAACC,SAAvB,CAAlB;AACA,cAAMC,IAAI,GAAG,CAACP,KAAK,GAAGF,MAAT,IAAmBJ,GAAG,CAACG,IAAJ,CAAS,CAAT,EAAYW,KAAZ,CAAkBC,MAAlD;AACA,cAAMC,GAAG,GAAG,EAAZ;AACA,YAAIC,EAAE,GAAGb,MAAT;AAEA,cAAMc,UAAU,GAAGf,IAAI,CAACgB,GAAL,CAAS,CAACC,EAAD,EAAKC,CAAL,KAAW;AACnCpB,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAe,UAAAA,EAAE,GAAGb,MAAL;AACA,iBAAOgB,EAAE,CAACN,KAAH,CAASK,GAAT,CAAcG,EAAD,IAAQ;AAC1B,kBAAMC,GAAG,GAAG,EAAZ;AACAA,YAAAA,GAAG,CAACD,EAAJ,GAASA,EAAT;AACAC,YAAAA,GAAG,CAACN,EAAJ,GAASA,EAAT;AACAA,YAAAA,EAAE,GAAGO,IAAI,CAACC,KAAL,CAAWR,EAAE,GAAGJ,IAAhB,CAAL;AACA,mBAAOU,GAAP;AACD,WANM,CAAP;AAOH,SAVkB,CAAnB;AAWAtB,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BgB,UAA7B;AACAjB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBc,GAAzB;AACD,OAxBD,MAwBO;AACLf,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,KA/BD;AAiCE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHH,GAvJQ,EAuJN,EAvJM,CAAT;AAyJA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAKD,CA/JD;;AAiKA,MAAMwB,GAAG,GAAG,MAAM;AAChB,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAND;;AAQA,eAAeA,GAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  useEffect(() => {\n    const url = 'http://localhost:3010';\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        console.log(res.data[1]);\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const timeRange = d3.extent(data, d => d.createdAt);\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        const arr = [];\n        let hz = baseHz;\n\n        const mappedData = data.map((el, i) => {\n            console.log('started');\n            hz = baseHz;\n            return el.freqs.map((db) => {\n              const tmp = {};\n              tmp.db = db;\n              tmp.hz = hz;\n              hz = Math.round(hz + step);\n              return tmp;\n            });\n        });\n        console.log('mapped data: ', mappedData);\n        console.log('tmp arr: ', arr);\n      } else {\n        console.log('empty response');\n      }\n    });\n\n      /*\n      const legendData = [\n        {'interval': -127, 'color': 'purple'},\n        {'interval': -65, 'color': 'darkorchid'},\n        {'interval': 0, 'color': 'mediumpurple'},\n        {'interval': 65, 'color': 'lightskyblue'},\n        {'interval': 127, 'color': 'khaki'}\n      ];\n      \n      const width = 917,\n            height = 408,\n            margins = {top:20, right: 50, bottom: 100, left: 100};\n      \n      const yScale = d3.scaleLinear()\n        .range([height,0])\n        .domain([12,0]);\n      \n      const xScale = d3.scaleLinear()\n        .range([0,width])\n        .domain(d3.extent(data, d => {return d.createdAt; }));\n      \n      //Setting chart width and adjusting for margins\n      const chart = d3.select('.chart')\n        .attr('width', width + margins.right + margins.left)\n        .attr('height', height + margins.top + margins.bottom)\n        .append('g')\n        .attr('transform','translate(' + margins.left + ',' + margins.top + ')');\n      \n      const tooltip = d3.select('.container').append('div')\n        .attr('class','tooltip')\n        .html('Tooltip')\n      \n      const barWidth = width / (yearRange[1] - yearRange[0]),\n            barHeight = height / 12;\n      \n      //Return dynamic color based on intervals in legendData\n      const colorScale = d => {\n        for (let i = 0; i < legendData.length; i++) {\n          if (d.db + baseTemperature < legendData[i].interval) {\n            return legendData[i].color;\n          }\n        }\n        return 'darkred';\n      };\n      \n      //Return abbreviate month string from month decimal\n      const timeParseFormat = d => {\n        if (d === 0) return '';\n        return d3.timeFormat('%b')(d3.timeParse('%m')(d));\n      };\n      \n      //Append heatmap bars, styles, and mouse events\n      chart.selectAll('g')\n        .data(data).enter().append('g')\n        .append('rect')\n        .attr('x', d => {return (d.freq - timeRange[0]) * barWidth})\n        .attr('y', d => {return (d.createdAt - 1) * barHeight})\n        .style('fill', colorScale)\n        .attr('width', barWidth)\n        .attr('height', barHeight)\n        .on('mouseover', d => {\n          tooltip.html(timeParseFormat(d.month) + ' ' + d.year + '<br/>' +\n            d3.format('.4r')(baseTemperature + d.variance) + ' &degC<br/>' + d.variance + ' &degC' )\n            .style('left', d3.event.pageX - 35 + 'px')\n            .style('top', d3.event.pageY - 73 + 'px')\n            .style('opacity', .9);\n        }).on('mouseout', () => {\n          tooltip.style('opacity', 0)\n            .style('left', '0px');\n        });\n      \n      //Append x axis\n      chart.append('g')\n        .attr('transform','translate(0,' + height + ')')\n        .call(d3.axisBottom(xScale).tickFormat(d3.format('.4')));\n      \n      //Append y axis\n      chart.append('g')\n        .attr('transform','translate(0,-' + barHeight / 2 + ')')\n        .call(d3.axisLeft(yScale).tickFormat(timeParseFormat))\n        .attr('class','yAxis');\n      \n      //Append y axis label\n      chart.append('text')\n        .attr('transform','translate(-40,' + (height / 2)  + ') rotate(-90)')\n        .style('text-anchor','middle')\n        .text('Month');\n      \n      //Append x axis label\n      chart.append('text')\n        .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n        .style('text-anchor','middle')\n        .text('Year');\n      \n      //Append color legend using legendData\n      chart.append('g')\n        .selectAll('g')\n        .data(legendData).enter()\n        .append('rect')\n        .attr('width', 30)\n        .attr('height', 20)\n        .attr('x', (d, i) => { return i * 30 + width * .7;})\n        .attr('y', height + margins.top)\n        .style('fill', d => {return d.color; });\n      \n      //Append text labels for legend from legendData\n      chart.append('g')\n        .selectAll('text')\n        .data(legendData).enter().append('text')\n        .attr('x', (d,i) => {return i * 30 + width * .7})\n        .attr('y', height + margins.top * 3)\n        .text(d => {return d.interval; });\n        \n    });\n    */ \n\n  }, []);\n\n  return (\n    <Fragment>\n      <h1>Heatmap</h1>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Heatmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}