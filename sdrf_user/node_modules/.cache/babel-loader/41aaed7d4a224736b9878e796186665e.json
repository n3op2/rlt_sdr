{"ast":null,"code":"var _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  const url = 'http://localhost:3010';\n\n  const getData = async () => {\n    const res = await axios.get(url);\n    const data = res.data;\n    const baseHz = res.data[0].hzLow;\n    const topHz = res.data[0].hzHigh;\n    const baseTemperature = res.data[0].hzLow;\n    const step = (topHz - baseHz) / res.data[0].freqs.length;\n    let hz = baseHz;\n    const dataVis = [];\n    const mappedData = data.map((el, i) => {\n      console.log('started');\n      hz = baseHz;\n      return el.freqs.map(db => {\n        const tmp = {};\n        tmp.createdAt = el.createdAt;\n        tmp.db = db;\n        tmp.hz = hz;\n        hz = Math.round(hz + step);\n        dataVis.push(tmp);\n        return tmp;\n      });\n    }); // TODO move it to a separate function\n\n    const hzRange = [baseHz, topHz];\n    const margin = {\n      top: 100,\n      right: 50,\n      bottom: 100,\n      left: 50\n    };\n    const width = 9450 - margin.left - margin.right;\n    const height = 950 - margin.top - margin.bottom;\n    const svg = d3.select('.chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n    const xScale = d3.scaleBand().range([0, width]).domain(mappedData[0].map(d => {\n      return d.hz;\n    })).padding(0.01);\n    svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(xScale).ticks(30, 's')).attr('class', 'xAxis');\n    const yScale = d3.scaleBand().range([height, 0]).domain(mappedData.map(el => el.map(item => item.createdAt).filter((v, i, a) => a.indexOf(v) === i)[0])).padding(0.01);\n    svg.append(\"g\").call(d3.axisLeft(yScale)).attr('class', 'yAxis');\n    svg.append('text').attr('transform', 'translate(' + width / 2 + ',' + (height + 40) + ')').style('text-anchor', 'middle').text('HZ');\n    const colorScale = d3.scaleLinear().range(['blue', 'yellow', 'red']).domain([-127, 0, 127]);\n    svg.selectAll('g.x text').attr('transform', 'translate(-10,10) rotate(315)');\n    svg.selectAll().data(dataVis).enter().append(\"rect\").attr(\"x\", function (d) {\n      return xScale(d.hz);\n    }).attr(\"y\", function (d) {\n      return yScale(d.createdAt);\n    }).attr(\"width\", xScale.bandwidth()).attr(\"height\", yScale.bandwidth()).style(\"fill\", function (d) {\n      return colorScale(d.db);\n    });\n    svg.selectAll('g.x').attr('transform', 'translate(-10,10) rotate(315)');\n    await new Promise(r => setTimeout(r, 3000));\n    return getData();\n  };\n\n  useEffect(() => {\n    console.log('useEffect()');\n    getData();\n    /*\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const dataVis = [];\n         const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map((db) => {\n            const tmp = {};\n            tmp.createdAt = el.createdAt;\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            dataVis.push(tmp);\n            return tmp;\n          });\n        });\n         console.log('top: ', topHz, '\\nbase: ', baseHz);\n         // TODO move it to a separate function\n        const hzRange = [baseHz, topHz]; \n        const margin = {top: 100, right: 50, bottom: 100, left: 50};\n        const width = 9450 - margin.left - margin.right;\n        const height = 950 - margin.top - margin.bottom;\n         const svg = d3.select('.chart')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n         const xScale = d3.scaleBand()\n          .range([0, width])\n          .domain(mappedData[0].map(d => {\n            return d.hz;\n          }))\n          .padding(0.01);\n         svg.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale)\n            .ticks(30, 's'))\n          .attr('class','xAxis');\n          const yScale = d3.scaleBand()\n          .range([ height, 0 ])\n          .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n            .filter((v, i, a) => a.indexOf(v) === i)[0]))\n          .padding(0.01);\n         svg.append(\"g\")\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n         svg.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n         const colorScale = d3.scaleLinear()\n          .range(['blue', 'yellow', 'red'])\n          .domain([-127, 0, 127]);\n        \n        svg.selectAll('g.x text')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n         svg.selectAll()\n            .data(dataVis)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", function(d) { \n              return xScale(d.hz) \n            })\n            .attr(\"y\", function(d) { \n              return yScale(d.createdAt) \n            })\n            .attr(\"width\", xScale.bandwidth() )\n            .attr(\"height\", yScale.bandwidth() )\n            .style(\"fill\", function(d) { return colorScale(d.db)} )\n      \n        svg.selectAll('g.x')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n      }\n    });\n    */\n  }, ['data']);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, \"Heatmap\"), React.createElement(\"svg\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    style: {\n      height: '100%'\n    },\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","useState","d3","axios","Heatmap","url","getData","res","get","data","baseHz","hzLow","topHz","hzHigh","baseTemperature","step","freqs","length","hz","dataVis","mappedData","map","el","i","console","log","db","tmp","createdAt","Math","round","push","hzRange","margin","top","right","bottom","left","width","height","svg","select","attr","append","xScale","scaleBand","range","domain","d","padding","call","axisBottom","ticks","yScale","item","filter","v","a","indexOf","axisLeft","style","text","colorScale","scaleLinear","selectAll","enter","bandwidth","Promise","r","setTimeout","App"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst Heatmap = () => {\n  const url = 'http://localhost:3010';\n   \n  const getData = async () => {\n    const res = await axios.get(url);\n    const data = res.data;\n    const baseHz = res.data[0].hzLow;\n    const topHz = res.data[0].hzHigh;\n    const baseTemperature = res.data[0].hzLow;\n    const step = (topHz - baseHz) / res.data[0].freqs.length;\n    let hz = baseHz;\n    const dataVis = [];\n    const mappedData = data.map((el, i) => {\n      console.log('started');\n      hz = baseHz;\n      return el.freqs.map((db) => {\n        const tmp = {};\n        tmp.createdAt = el.createdAt;\n        tmp.db = db;\n        tmp.hz = hz;\n        hz = Math.round(hz + step);\n        dataVis.push(tmp);\n        return tmp;\n      });\n    });\n    // TODO move it to a separate function\n    const hzRange = [baseHz, topHz];\n    const margin = {top: 100, right: 50, bottom: 100, left: 50};\n    const width = 9450 - margin.left - margin.right;\n    const height = 950 - margin.top - margin.bottom;\n\n    const svg = d3.select('.chart')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n    const xScale = d3.scaleBand()\n      .range([0, width])\n      .domain(mappedData[0].map(d => {\n        return d.hz;\n      }))\n      .padding(0.01);\n\n    svg.append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(xScale)\n        .ticks(30, 's'))\n      .attr('class','xAxis');\n\n\n    const yScale = d3.scaleBand()\n      .range([ height, 0 ])\n      .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n        .filter((v, i, a) => a.indexOf(v) === i)[0]))\n      .padding(0.01);\n\n    svg.append(\"g\")\n      .call(d3.axisLeft(yScale))\n      .attr('class','yAxis');\n\n    svg.append('text')\n      .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n      .style('text-anchor','middle')\n      .text('HZ');\n\n    const colorScale = d3.scaleLinear()\n      .range(['blue', 'yellow', 'red'])\n      .domain([-127, 0, 127]);\n\n    svg.selectAll('g.x text')\n      .attr('transform', 'translate(-10,10) rotate(315)');\n\n    svg.selectAll()\n        .data(dataVis)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function(d) {\n          return xScale(d.hz)\n        })\n        .attr(\"y\", function(d) {\n          return yScale(d.createdAt)\n        })\n        .attr(\"width\", xScale.bandwidth() )\n        .attr(\"height\", yScale.bandwidth() )\n        .style(\"fill\", function(d) { return colorScale(d.db)} )\n\n    svg.selectAll('g.x')\n      .attr('transform', 'translate(-10,10) rotate(315)');\n\n    await new Promise((r) => setTimeout(r, 3000));\n    return getData();\n  };\n\n  useEffect(() => {\n    console.log('useEffect()');\n    getData();\n    /*\n    axios.get(url).then(res => {\n      console.log('fetching data...');\n      // TODO have a separate table for data values such as\n      // hzLow, hzHigh and link it with freqs id\n      if (res.data) {\n        // TODO tidy up\n        const data = res.data;\n        const baseHz = res.data[0].hzLow;\n        const topHz = res.data[0].hzHigh;\n        const baseTemperature = res.data[0].hzLow;\n        const step = (topHz - baseHz) / res.data[0].freqs.length;\n        let hz = baseHz;\n        const dataVis = [];\n\n        const mappedData = data.map((el, i) => {\n          console.log('started');\n          hz = baseHz;\n          return el.freqs.map((db) => {\n            const tmp = {};\n            tmp.createdAt = el.createdAt;\n            tmp.db = db;\n            tmp.hz = hz;\n            hz = Math.round(hz + step);\n            dataVis.push(tmp);\n            return tmp;\n          });\n        });\n\n        console.log('top: ', topHz, '\\nbase: ', baseHz);\n\n        // TODO move it to a separate function\n        const hzRange = [baseHz, topHz]; \n        const margin = {top: 100, right: 50, bottom: 100, left: 50};\n        const width = 9450 - margin.left - margin.right;\n        const height = 950 - margin.top - margin.bottom;\n\n        const svg = d3.select('.chart')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n        const xScale = d3.scaleBand()\n          .range([0, width])\n          .domain(mappedData[0].map(d => {\n            return d.hz;\n          }))\n          .padding(0.01);\n\n        svg.append('g')\n          .attr('transform', 'translate(0,' + height + ')')\n          .call(d3.axisBottom(xScale)\n            .ticks(30, 's'))\n          .attr('class','xAxis');\n\n\n        const yScale = d3.scaleBand()\n          .range([ height, 0 ])\n          .domain(mappedData.map((el) => el.map((item) => item.createdAt)\n            .filter((v, i, a) => a.indexOf(v) === i)[0]))\n          .padding(0.01);\n\n        svg.append(\"g\")\n          .call(d3.axisLeft(yScale))\n          .attr('class','yAxis');\n\n        svg.append('text')\n          .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n          .style('text-anchor','middle')\n          .text('HZ');\n\n        const colorScale = d3.scaleLinear()\n          .range(['blue', 'yellow', 'red'])\n          .domain([-127, 0, 127]);\n        \n        svg.selectAll('g.x text')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n\n        svg.selectAll()\n            .data(dataVis)\n            .enter()\n            .append(\"rect\")\n            .attr(\"x\", function(d) { \n              return xScale(d.hz) \n            })\n            .attr(\"y\", function(d) { \n              return yScale(d.createdAt) \n            })\n            .attr(\"width\", xScale.bandwidth() )\n            .attr(\"height\", yScale.bandwidth() )\n            .style(\"fill\", function(d) { return colorScale(d.db)} )\n      \n        svg.selectAll('g.x')\n          .attr('transform', 'translate(-10,10) rotate(315)');\n      }\n    });\n    */\n  }, ['data']);\n\n  return (\n    <Fragment>\n      <h1>Heatmap</h1>\n      <svg className='chart'></svg>\n    </Fragment>\n  );\n};\n\nconst App = () => {\n  return (\n    <div style={{height: '100%'}} className=\"App\">\n      <Heatmap />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}