{"ast":null,"code":"import _slicedToArray from \"/home/n3op2/node/sdrf_client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/n3op2/node/sdrf_client/src/App.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\nconst url = 'http://localhost:3010';\nconst reader = new FileReader(); // D3 stuff \n\nconst margin = {\n  top: 100,\n  right: 50,\n  bottom: 100,\n  left: 50\n};\nconst width = 9450 - margin.left - margin.right;\nconst height = 1250 - margin.top - margin.bottom;\n\nconst Heatmap = () => {\n  // TODO merge/review containers...\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        samples = _useState2[0],\n        setSamples = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        d3data = _useState4[0],\n        setD3Data = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        decoding = _useState6[0],\n        setDecoding = _useState6[1]; // Testing\n\n\n  const _useState7 = useState(null),\n        _useState8 = _slicedToArray(_useState7, 2),\n        xScale = _useState8[0],\n        setX = _useState8[1];\n\n  const _useState9 = useState(null),\n        _useState10 = _slicedToArray(_useState9, 2),\n        yScale = _useState10[0],\n        setY = _useState10[1];\n\n  const svg = d3.select('.chart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')'); // Blob to string\n\n  const freqsMapper = (data, hzLow, hzHigh, createdAt) => {\n    const step = (hzHigh - hzLow) / data.freqs.length;\n    let hz = hzLow;\n    const tmpArray = [];\n    return data.freqs.map(db => {\n      const tmpObj = {};\n      tmpObj.createdAt = createdAt;\n      tmpObj.db = db;\n      tmpObj.hz = hz;\n      hz = Math.round(hz + step);\n      tmpArray.push(tmpObj);\n      return tmpObj;\n    });\n  }; // FileReader 'onload' event\n\n\n  reader.onload = (s => {\n    return e => {\n      const data = JSON.parse(e.target.result);\n\n      if (data) {\n        const hzLow = data.hzLow,\n              hzHigh = data.hzHigh,\n              createdAt = data.createdAt;\n        const newLine = freqsMapper(data, hzLow, hzHigh, createdAt);\n        let tmpArr = [...s];\n        tmpArr.unshift(newLine);\n        tmpArr.pop();\n        setSamples(tmpArr);\n        console.log('complete');\n      }\n    };\n  })(samples); //Prepary d3\n\n\n  const prepareD3 = data => {\n    console.log('data: ', data); // X d3 scale\n\n    const x = d3.scaleBand().range([0, width]).domain(data[0].map(d => {\n      return d.hz;\n    })).padding(0.01); // Y d3 scale\n\n    const y = d3.scaleBand().range([height, 0]).domain(data.map(el => el.map(item => item.createdAt).filter((v, i, a) => a.indexOf(v) === i)[0])).padding(0.01);\n    svg.append('g').attr('transform', 'translate(0,' + height + ')').call(d3.axisBottom(x)).attr('class', 'xAxis');\n    svg.append(\"g\").call(d3.axisLeft(y)).attr('class', 'yAxis');\n    setX(() => x);\n    setY(() => y);\n  }; // Pull data from the server and store it in the state\n\n\n  const getData = async () => {\n    const res = await axios.get(url);\n    const data = res.data;\n    const baseHz = res.data[0].hzLow;\n    const topHz = res.data[0].hzHigh;\n    const step = (topHz - baseHz) / res.data[0].freqs.length;\n    let hz = baseHz;\n    const dataVis = []; // TODO setSamples(map...)\n\n    const mappedData = data.map((el, i) => {\n      hz = baseHz;\n      return el.freqs.map(db => {\n        const tmp = {};\n        tmp.createdAt = el.createdAt;\n        tmp.db = db;\n        tmp.hz = hz;\n        hz = Math.round(hz + step);\n        dataVis.push(tmp);\n        return tmp;\n      });\n    }); // update state\n\n    setD3Data([...dataVis]);\n    setSamples([...mappedData]);\n    prepareD3(mappedData);\n    await new Promise(r => setTimeout(r, 3000));\n    return new Promise(resolve => {\n      if (mappedData) return resolve(mappedData);\n      resolve('mappedData -> undefined');\n    });\n  };\n\n  useEffect(() => {\n    const wsClient = new WebSocket('ws://localhost:8080');\n\n    wsClient.onopen = () => onConnection();\n\n    wsClient.onmessage = msg => handleMessage(msg);\n\n    wsClient.onclose = e => console.log('closing ws connection... ', e);\n\n    getData();\n    return () => {\n      console.log('unmounting...');\n    };\n  }, []); // websocket event handlers\n  // ===================================================================\n\n  const handleMessage = msg => {\n    console.log('msg received: ', this.decoding);\n    setDecoding(true);\n\n    if (!decoding) {\n      console.log('decoding started');\n      reader.readAsText(msg.data);\n    }\n  };\n\n  const onConnection = () => {\n    console.log('websocket: connected');\n  };\n\n  console.log('re-rendering: ', samples.length);\n\n  if (samples.length > 0 && xScale && yScale) {\n    console.log('should print THE map');\n    console.log('xScale: ', xScale.bandwidth());\n    console.log('svg: ', svg);\n    svg.append('text').attr('transform', 'translate(' + width / 2 + ',' + (height + 40) + ')').style('text-anchor', 'middle').text('HZ');\n    const colorScale = d3.scaleLinear().range(['blue', 'yellow', 'red']).domain([-127, 0, 127]);\n    svg.selectAll('g.x text').attr('transform', 'translate(-10,10) rotate(315)');\n    svg.selectAll().data(d3data).enter().append(\"rect\").attr(\"x\", function (d) {\n      return xScale(d.hz);\n    }).attr(\"y\", function (d) {\n      return yScale(d.createdAt);\n    }).attr(\"width\", xScale.bandwidth()).attr(\"height\", yScale.bandwidth()).style(\"fill\", function (d) {\n      return colorScale(d.db);\n    });\n  }\n\n  ; // Testing... to remove\n\n  const renderHeatmap = () => {};\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, renderHeatmap());\n};\n\nconst Main = () => {\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        close = _useState12[0],\n        setClose = _useState12[1];\n\n  const handleClose = e => {\n    setClose(close ? false : true);\n    console.log('closing connection');\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, \"close\"), React.createElement(\"svg\", {\n    className: \"chart\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }), close ? null : React.createElement(Heatmap, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }));\n};\n\nconst App = () => {\n  return React.createElement(\"div\", {\n    style: {\n      height: '100%'\n    },\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, React.createElement(Main, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/n3op2/node/sdrf_client/src/App.js"],"names":["React","Fragment","useEffect","useState","d3","axios","url","reader","FileReader","margin","top","right","bottom","left","width","height","Heatmap","samples","setSamples","d3data","setD3Data","decoding","setDecoding","xScale","setX","yScale","setY","svg","select","attr","append","freqsMapper","data","hzLow","hzHigh","createdAt","step","freqs","length","hz","tmpArray","map","db","tmpObj","Math","round","push","onload","s","e","JSON","parse","target","result","newLine","tmpArr","unshift","pop","console","log","prepareD3","x","scaleBand","range","domain","d","padding","y","el","item","filter","v","i","a","indexOf","call","axisBottom","axisLeft","getData","res","get","baseHz","topHz","dataVis","mappedData","tmp","Promise","r","setTimeout","resolve","wsClient","WebSocket","onopen","onConnection","onmessage","msg","handleMessage","onclose","readAsText","bandwidth","style","text","colorScale","scaleLinear","selectAll","enter","renderHeatmap","Main","close","setClose","handleClose","App"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\nimport axios from 'axios';\n\nconst url = 'http://localhost:3010';\nconst reader = new FileReader();\n// D3 stuff \nconst margin = {top: 100, right: 50, bottom: 100, left: 50};\nconst width = 9450 - margin.left - margin.right;\nconst height = 1250 - margin.top - margin.bottom;\n\n\nconst Heatmap = () => {\n  // TODO merge/review containers...\n  const [samples, setSamples] = useState([]);\n  const [d3data, setD3Data] = useState([]);\n  const [decoding, setDecoding] = useState(false);\n\n  // Testing\n  const [xScale, setX] = useState(null);\n  const [yScale, setY] = useState(null);\n\n  const svg = d3.select('.chart')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n  // Blob to string\n\n  const freqsMapper = (data, hzLow, hzHigh, createdAt) => {\n    const step = (hzHigh - hzLow) / data.freqs.length;\n    let hz = hzLow;\n    const tmpArray = [];\n\n    return data.freqs.map((db) => {\n      const tmpObj = {};\n      tmpObj.createdAt = createdAt;\n      tmpObj.db = db;      \n      tmpObj.hz = hz;\n      hz = Math.round(hz + step);\n      tmpArray.push(tmpObj);\n      return tmpObj;\n    });\n  };\n\n  // FileReader 'onload' event\n  reader.onload = ((s) => {\n    return (e) => {\n      const data = JSON.parse(e.target.result);\n    \n      if (data) {\n        const { hzLow, hzHigh, createdAt } = data\n        const newLine = freqsMapper(data, hzLow, hzHigh, createdAt);\n        let tmpArr = [...s];\n        tmpArr.unshift(newLine);\n        tmpArr.pop();\n        setSamples(tmpArr);\n        console.log('complete')\n      }\n    }\n  })(samples)\n\n  //Prepary d3\n  const prepareD3 = (data) => {\n    console.log('data: ', data)\n\n    // X d3 scale\n    const x = d3.scaleBand()\n      .range([0, width])\n      .domain(data[0].map(d => {\n        return d.hz;\n      }))\n      .padding(0.01);\n\n    // Y d3 scale\n    const y = d3.scaleBand()\n      .range([ height, 0 ])\n      .domain(data.map((el) => el.map((item) => item.createdAt)\n        .filter((v, i, a) => a.indexOf(v) === i)[0]))\n      .padding(0.01);\n\n    svg.append('g')\n      .attr('transform', 'translate(0,' + height + ')')\n      .call(d3.axisBottom(x))\n      .attr('class','xAxis');\n\n    svg.append(\"g\")\n        .call(d3.axisLeft(y))\n        .attr('class','yAxis');\n\n      setX(() => x);\n      setY(() => y);\n  };\n\n  // Pull data from the server and store it in the state\n  const getData = async () => {\n    const res = await axios.get(url);\n    const data = res.data;\n    const baseHz = res.data[0].hzLow;\n    const topHz = res.data[0].hzHigh;\n    const step = (topHz - baseHz) / res.data[0].freqs.length;\n    let hz = baseHz;\n    const dataVis = [];\n\n    // TODO setSamples(map...)\n    const mappedData = data.map((el, i) => {\n      hz = baseHz;\n      return el.freqs.map((db) => {\n        const tmp = {};\n        tmp.createdAt = el.createdAt;\n        tmp.db = db;\n        tmp.hz = hz;\n        hz = Math.round(hz + step);\n        dataVis.push(tmp);\n        return tmp;\n      });\n    });\n\n    // update state\n    setD3Data([...dataVis])\n    setSamples([...mappedData]);\n    prepareD3(mappedData);\n  \n    await new Promise((r) => setTimeout(r, 3000));\n\n    return new Promise((resolve) => {\n      if (mappedData) return resolve(mappedData);\n      resolve('mappedData -> undefined')\n    });\n  };\n\n  useEffect(() => {\n    const wsClient = new WebSocket('ws://localhost:8080');\n\n    wsClient.onopen = () => onConnection(); \n    wsClient.onmessage = (msg) => handleMessage(msg);\n    wsClient.onclose = (e) => console.log('closing ws connection... ', e);\n\n    getData();\n\n    return () => {\n      console.log('unmounting...');\n    }\n  }, []);\n\n  // websocket event handlers\n  // ===================================================================\n  const handleMessage = (msg) => {\n    console.log('msg received: ', this.decoding);\n    setDecoding(true);\n\n    if (!decoding) {\n      console.log('decoding started')\n      reader.readAsText(msg.data);\n    }\n  };\n\n  const onConnection = () => {\n    console.log('websocket: connected');\n  };\n\n  console.log('re-rendering: ', samples.length)\n\n  if (samples.length > 0 && xScale && yScale) {\n    console.log('should print THE map')\n    console.log('xScale: ', xScale.bandwidth());\n    console.log('svg: ', svg)\n    \n    svg.append('text')\n      .attr('transform','translate(' + (width / 2) + ',' + (height + 40) + ')')\n      .style('text-anchor','middle')\n      .text('HZ');\n\n    const colorScale = d3.scaleLinear()\n      .range(['blue', 'yellow', 'red'])\n      .domain([-127, 0, 127]);\n\n    svg.selectAll('g.x text')\n      .attr('transform', 'translate(-10,10) rotate(315)');\n\n    svg.selectAll()\n        .data(d3data)\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function(d) {\n          return xScale(d.hz)\n        })\n        .attr(\"y\", function(d) {\n          return yScale(d.createdAt)\n        })\n        .attr(\"width\", xScale.bandwidth() )\n        .attr(\"height\", yScale.bandwidth() )\n        .style(\"fill\", function(d) { return colorScale(d.db)} )\n  };\n\n  // Testing... to remove\n  const renderHeatmap = () => {\n  };\n\n  return (\n    <Fragment>\n      {renderHeatmap()}\n    </Fragment>\n  );\n};\n\nconst Main = () => {\n  const [close, setClose] = useState(false);\n\n  const handleClose = (e) => {\n    setClose(close ? false : true);\n    console.log('closing connection');\n  };\n\n  return (\n    <Fragment>\n      <button onClick={handleClose}>close</button>\n      <svg className='chart'></svg>\n      {close ? null : <Heatmap />} \n    </Fragment>\n  );\n}\n\nconst App = () => {\n  return (\n    <div style={{height: '100%'}} className=\"App\">\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}